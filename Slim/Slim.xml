<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Slim</name>
    </assembly>
    <members>
        <member name="T:Slim.Exceptions.DependencyInjectionException">
            <summary>
            Exception thrown when <see cref="T:Slim.IServiceManager"/> fails to create a service.
            </summary>
        </member>
        <member name="M:Slim.Exceptions.DependencyInjectionException.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Slim.Exceptions.DependencyInjectionException"/>.
            </summary>
        </member>
        <member name="M:Slim.Exceptions.DependencyInjectionException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Slim.Exceptions.DependencyInjectionException"/>.
            </summary>
            <param name="message">Message of the exception.</param>
        </member>
        <member name="M:Slim.Exceptions.DependencyInjectionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <see cref="T:Slim.Exceptions.DependencyInjectionException"/>.
            </summary>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:Slim.Exceptions.DependencyInjectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <see cref="T:Slim.Exceptions.DependencyInjectionException"/>.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:Slim.IServiceManager">
            <summary>
            Interface for <see cref="T:Slim.ServiceManager"/>.
            </summary>
        </member>
        <member name="P:Slim.IServiceManager.AllowScopedManagerModifications">
            <summary>
            Allow modifications to scoped <see cref="T:Slim.IServiceManager"/> created from this <see cref="T:Slim.IServiceManager"/>.
            </summary>
        </member>
        <member name="P:Slim.IServiceManager.IsReadOnly">
            <summary>
            Returns true if <see cref="T:Slim.IServiceManager"/> is readonly.
            </summary>
        </member>
        <member name="M:Slim.IServiceManager.IsRegistered(System.Type)">
            <summary>
            Returns true if there exists a registration for <paramref name="tInterface"/>.
            </summary>
            <param name="tInterface">Type of registered service.</param>
            <returns>True if service <paramref name="tInterface"/> is registered. Otherwise returns false.</returns>
        </member>
        <member name="M:Slim.IServiceManager.IsRegistered``1">
            <summary>
            Returns true if there exists a registration for <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of registered service.</typeparam>
            <returns>True if service <typeparamref name="T"/> is registered. Otherwise returns false.</returns>
        </member>
        <member name="M:Slim.IServiceManager.GetServicesOfType``1">
            <summary>
            Returns all services that can be cast to provided type.
            </summary>
            <typeparam name="T">Type of the returned services.</typeparam>
        </member>
        <member name="M:Slim.IServiceManager.GetServicesOfType(System.Type)">
            <summary>
            Returns all services that can be cast to provided type.
            </summary>
            <param name="type">Type of the returned services.</param>
        </member>
        <member name="M:Slim.IServiceManager.RegisterServiceManager">
            <summary>
            Register the current service manager as a valid dependency.
            </summary>
            <remarks>Registers current service manager as <see cref="T:Slim.ServiceManager"/>, <see cref="T:Slim.IServiceManager"/>, <see cref="T:Slim.IServiceProducer"/>, <see cref="T:Slim.IServiceProvider"/>.</remarks>
        </member>
        <member name="M:Slim.IServiceManager.BuildSingletons">
            <summary>
            Builds all registered singletons.
            </summary>
        </member>
        <member name="M:Slim.IServiceManager.HandleException``1(System.Func{Slim.IServiceProvider,``0,System.Boolean})">
            <summary>
            Marks a type of exception to be caught and handled.
            </summary>
            <typeparam name="T">Type of exception to catch.</typeparam>
            <param name="handle">Handler of the exception. Handler returns true if the exception should be thrown again.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Slim.IServiceManager.Clear">
            <summary>
            Clears all registered types, singletons, factories and exception handlers.
            </summary>
            <remarks>
            Calls <see cref="M:System.IDisposable.Dispose"/> on all <see cref="T:System.IDisposable"/> singletons.
            </remarks>
        </member>
        <member name="M:Slim.IServiceManager.RegisterResolver(Slim.Resolvers.IDependencyResolver)">
            <summary>
            Register a resolver that manually resolves dependencies.
            </summary>
            <param name="dependencyResolver">Resolver that manually creates a dependency.</param>
        </member>
        <member name="T:Slim.IServiceProducer">
            <summary>
            Interface allowing to produce services for the <see cref="T:Slim.ServiceManager"/>.
            </summary>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterSingleton``1(System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Singleton"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterSingleton``1(System.Func{Slim.IServiceProvider,``0},System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Singleton"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <param name="serviceFactory">Factory for the implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterTransient``1(System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Transient"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterTransient``1(System.Func{Slim.IServiceProvider,``0},System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Transient"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <param name="serviceFactory">Factory for the implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterScoped``1(System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Scoped"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterScoped``1(System.Func{Slim.IServiceProvider,``0},System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Scoped"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <param name="serviceFactory">Factory for the implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterTransient``2">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Transient"/>.
            </summary>
            <typeparam name="TInterface">Type of interface.</typeparam>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterTransient``2(System.Func{Slim.IServiceProvider,``1})">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Transient"/>.
            </summary>
            <typeparam name="TInterface">Type of interface.</typeparam>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <param name="serviceFactory">Factory for the implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterSingleton``2">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Singleton"/>.
            </summary>
            <typeparam name="TInterface">Type of interface.</typeparam>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterSingleton``2(System.Func{Slim.IServiceProvider,``1})">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Singleton"/>.
            </summary>
            <typeparam name="TInterface">Type of interface.</typeparam>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <param name="serviceFactory">Factory for implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterScoped``2">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Scoped"/>.
            </summary>
            <typeparam name="TInterface">Type of interface.</typeparam>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterScoped``2(System.Func{Slim.IServiceProvider,``1})">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Scoped"/>.
            </summary>
            <typeparam name="TInterface">Type of interface.</typeparam>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <param name="serviceFactory">Factory for the implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterTransient(System.Type,System.Type)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Transient"/>.
            </summary>
            <param name="tInterface">Type of interface.</param>
            <param name="tClass">Type of implementation.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterTransient(System.Type,System.Type,System.Func{Slim.IServiceProvider,System.Object})">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Transient"/>.
            </summary>
            <param name="tInterface">Type of interface.</param>
            <param name="tClass">Type of implementation.</param>
            <param name="serviceFactory">Factory for implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterSingleton(System.Type,System.Type)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Singleton"/>.
            </summary>
            <param name="tInterface">Type of interface.</param>
            <param name="tClass">Type of implementation.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterSingleton(System.Type,System.Type,System.Func{Slim.IServiceProvider,System.Object})">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Singleton"/>.
            </summary>
            <param name="tInterface">Type of interface.</param>
            <param name="tClass">Type of implementation.</param>
            <param name="serviceFactory">Factory for implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterScoped(System.Type,System.Type)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Scoped"/>.
            </summary>
            <param name="tInterface">Type of interface.</param>
            <param name="tClass">Type of implementation.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterScoped(System.Type,System.Type,System.Func{Slim.IServiceProvider,System.Object})">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Scoped"/>.
            </summary>
            <param name="tInterface">Type of interface.</param>
            <param name="tClass">Type of implementation.</param>
            <param name="serviceFactory">Factory for implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterTransient(System.Type,System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Transient"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <param name="tClass">Type of implementation.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterTransient(System.Type,System.Func{Slim.IServiceProvider,System.Object},System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Transient"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <param name="tClass">Type of implementation.</param>
            <param name="serviceFactory">Factory for implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterSingleton(System.Type,System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Singleton"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <param name="tClass">Type of implementation.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterSingleton(System.Type,System.Func{Slim.IServiceProvider,System.Object},System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Singleton"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <param name="tClass">Type of implementation.</param>
            <param name="serviceFactory">Factory for implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterScoped(System.Type,System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Scoped"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <param name="tClass">Type of implementation.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.IServiceProducer.RegisterScoped(System.Type,System.Func{Slim.IServiceProvider,System.Object},System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Scoped"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <param name="tClass">Type of implementation.</param>
            <param name="serviceFactory">Factory for implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="T:Slim.IServiceProvider">
            <summary>
            Interface allowing to request services from the <see cref="T:Slim.ServiceManager"/>.
            </summary>
        </member>
        <member name="M:Slim.IServiceProvider.CreateScope">
            <summary>
            Creates a scoped <see cref="T:Slim.IServiceProvider"/>.
            </summary>
            <returns>Scoped <see cref="T:Slim.IServiceProvider"/>.</returns>
        </member>
        <member name="M:Slim.IServiceProvider.GetService``1">
            <summary>
            Resolves and returns the required service.
            </summary>
            <typeparam name="TInterface">Type of required service.</typeparam>
            <returns>Required service.</returns>
            <exception cref="T:Slim.Exceptions.DependencyInjectionException">Thrown when unable to resolve required service.</exception>
        </member>
        <member name="T:Slim.Resolvers.IDependencyResolver">
            <summary>
            Resolver that can be added to a <see cref="T:Slim.IServiceManager"/> to manually resolve a dependency.
            </summary>
        </member>
        <member name="M:Slim.Resolvers.IDependencyResolver.CanResolve(System.Type)">
            <summary>
            Returns true if the <see cref="T:Slim.Resolvers.IDependencyResolver"/> can resolve the dependency of provided <see cref="T:System.Type"/>.
            </summary>
            <param name="type"><see cref="T:System.Type"/> of dependency to be resolved.</param>
            <returns>True if <see cref="T:Slim.Resolvers.IDependencyResolver"/> can resolve the dependency. Otherwise false.</returns>
        </member>
        <member name="M:Slim.Resolvers.IDependencyResolver.Resolve(Slim.IServiceProvider,System.Type)">
            <summary>
            Returns a resolved dependency of the provided type.
            </summary>
            <param name="serviceProvider">Reference to the calling <see cref="T:Slim.IServiceProvider"/>.</param>
            <param name="type"><see cref="T:System.Type"/> of the dependency to be resolved.</param>
            <returns>Resolved dependency of provided <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="T:Slim.ServiceManager">
            <summary>
            <see cref="T:Slim.ServiceManager"/> responsible with storing and resolving services.
            </summary>
        </member>
        <member name="P:Slim.ServiceManager.AllowScopedManagerModifications">
            <summary>
            Allow modifications to scoped <see cref="T:Slim.IServiceManager"/> created from this <see cref="T:Slim.IServiceManager"/>.
            </summary>
        </member>
        <member name="P:Slim.ServiceManager.IsReadOnly">
            <summary>
            Returns true if <see cref="T:Slim.IServiceManager"/> is readonly.
            </summary>
        </member>
        <member name="M:Slim.ServiceManager.#ctor">
            <summary>
            Creates an instance of <see cref="T:Slim.IServiceManager"/>.
            </summary>
        </member>
        <member name="M:Slim.ServiceManager.IsRegistered(System.Type)">
            <summary>
            Returns true if there exists a registration for <paramref name="tInterface"/>.
            </summary>
            <param name="tInterface">Type of registered service.</param>
            <returns>True if service <paramref name="tInterface"/> is registered. Otherwise returns false.</returns>
        </member>
        <member name="M:Slim.ServiceManager.IsRegistered``1">
            <summary>
            Returns true if there exists a registration for <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of registered service.</typeparam>
            <returns>True if service <typeparamref name="T"/> is registered. Otherwise returns false.</returns>
        </member>
        <member name="M:Slim.ServiceManager.RegisterTransient``2">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Transient"/>.
            </summary>
            <typeparam name="TInterface">Type of interface.</typeparam>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterTransient``2(System.Func{Slim.IServiceProvider,``1})">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Transient"/>.
            </summary>
            <typeparam name="TInterface">Type of interface.</typeparam>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <param name="serviceFactory">Factory for the implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterSingleton``2">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Singleton"/>.
            </summary>
            <typeparam name="TInterface">Type of interface.</typeparam>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterSingleton``2(System.Func{Slim.IServiceProvider,``1})">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Singleton"/>.
            </summary>
            <typeparam name="TInterface">Type of interface.</typeparam>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <param name="serviceFactory">Factory for implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterScoped``2">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Scoped"/>.
            </summary>
            <typeparam name="TInterface">Type of interface.</typeparam>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterScoped``2(System.Func{Slim.IServiceProvider,``1})">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Scoped"/>.
            </summary>
            <typeparam name="TInterface">Type of interface.</typeparam>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <param name="serviceFactory">Factory for implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterTransient(System.Type,System.Type)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Transient"/>.
            </summary>
            <param name="tInterface">Type of interface.</param>
            <param name="tClass">Type of implementation.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterTransient(System.Type,System.Type,System.Func{Slim.IServiceProvider,System.Object})">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Transient"/>.
            </summary>
            <param name="tInterface">Type of interface.</param>
            <param name="tClass">Type of implementation.</param>
            <param name="serviceFactory">Factory for implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterSingleton(System.Type,System.Type)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Singleton"/>.
            </summary>
            <param name="tInterface">Type of interface.</param>
            <param name="tClass">Type of implementation.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterSingleton(System.Type,System.Type,System.Func{Slim.IServiceProvider,System.Object})">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Singleton"/>.
            </summary>
            <param name="tInterface">Type of interface.</param>
            <param name="tClass">Type of implementation.</param>
            <param name="serviceFactory">Factory for implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterScoped(System.Type,System.Type)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Scoped"/>.
            </summary>
            <param name="tInterface">Type of interface.</param>
            <param name="tClass">Type of implementation.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterScoped(System.Type,System.Type,System.Func{Slim.IServiceProvider,System.Object})">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Scoped"/>.
            </summary>
            <param name="tInterface">Type of interface.</param>
            <param name="tClass">Type of implementation.</param>
            <param name="serviceFactory">Factory for implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterSingleton``1(System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Singleton"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterSingleton``1(System.Func{Slim.IServiceProvider,``0},System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Singleton"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <param name="serviceFactory">Factory for the implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterTransient``1(System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Transient"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterTransient``1(System.Func{Slim.IServiceProvider,``0},System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Transient"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <param name="serviceFactory">Factory for the implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterScoped``1(System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Scoped"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterScoped``1(System.Func{Slim.IServiceProvider,``0},System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Scoped"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <typeparam name="TClass">Type of implementation.</typeparam>
            <param name="serviceFactory">Factory for the implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterTransient(System.Type,System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Transient"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <param name="tClass">Type of implementation.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterTransient(System.Type,System.Func{Slim.IServiceProvider,System.Object},System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Transient"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <param name="tClass">Type of implementation.</param>
            <param name="serviceFactory">Factory for implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterSingleton(System.Type,System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Singleton"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <param name="tClass">Type of implementation.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterSingleton(System.Type,System.Func{Slim.IServiceProvider,System.Object},System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Singleton"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <param name="tClass">Type of implementation.</param>
            <param name="serviceFactory">Factory for implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterScoped(System.Type,System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Scoped"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <param name="tClass">Type of implementation.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterScoped(System.Type,System.Func{Slim.IServiceProvider,System.Object},System.Boolean)">
            <summary>
            Register a service into <see cref="T:Slim.ServiceManager"/> with <see cref="F:Slim.Lifetime.Scoped"/>.
            Registers the service for all interfaces it implements.
            </summary>
            <param name="registerAllInterfaces">If true, <see cref="T:Slim.ServiceManager"/> will register all interfaces implemented by the provided class./></param>
            <param name="tClass">Type of implementation.</param>
            <param name="serviceFactory">Factory for implementation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided serviceFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:Slim.ServiceManager"/> contains an entry for the provided interface type.</exception>
        </member>
        <member name="M:Slim.ServiceManager.RegisterServiceManager">
            <summary>
            Register the current service manager as a valid dependency.
            </summary>
            <remarks>Registers current service manager as <see cref="T:Slim.ServiceManager"/>, <see cref="T:Slim.IServiceManager"/>, <see cref="T:Slim.IServiceProducer"/>, <see cref="T:Slim.IServiceProvider"/>.</remarks>
        </member>
        <member name="M:Slim.ServiceManager.CreateScope">
            <summary>
            Creates a scoped <see cref="T:Slim.IServiceProvider"/>.
            </summary>
            <returns>Scoped <see cref="T:Slim.IServiceProvider"/>.</returns>
        </member>
        <member name="M:Slim.ServiceManager.GetService``1">
            <summary>
            Resolves and returns the required service.
            </summary>
            <typeparam name="TInterface">Type of required service.</typeparam>
            <returns>Required service.</returns>
            <exception cref="T:Slim.Exceptions.DependencyInjectionException">Thrown when unable to resolve required service.</exception>
        </member>
        <member name="M:Slim.ServiceManager.GetService(System.Type)">
            <summary>
            Resolves and returns the required service.
            </summary>
            <param name="type">Type of required service.</param>
            <returns>Required service.</returns>
            <exception cref="T:Slim.Exceptions.DependencyInjectionException">Thrown when unable to resolve required service.</exception>
        </member>
        <member name="M:Slim.ServiceManager.GetServicesOfType``1">
            <summary>
            Returns all services that can be cast to provided type.
            </summary>
            <typeparam name="T">Type of the returned services.</typeparam>
        </member>
        <member name="M:Slim.ServiceManager.GetServicesOfType(System.Type)">
            <summary>
            Returns all services that can be cast to provided type.
            </summary>
            <param name="type">Type of the returned services.</param>
        </member>
        <member name="M:Slim.ServiceManager.HandleException``1(System.Func{Slim.IServiceProvider,``0,System.Boolean})">
            <summary>
            Marks a type of exception to be caught and handled.
            </summary>
            <typeparam name="T">Type of exception to catch.</typeparam>
            <param name="handle">Handler of the exception. Handler returns true if the exception should be thrown again.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Slim.ServiceManager.Clear">
            <summary>
            Clears all registered types, singletons, factories and exception handlers.
            </summary>
            <remarks>
            Calls <see cref="M:System.IDisposable.Dispose"/> on all <see cref="T:System.IDisposable"/> singletons.
            </remarks>
        </member>
        <member name="M:Slim.ServiceManager.BuildSingletons">
            <summary>
            Build all registered singletons.
            </summary>
        </member>
        <member name="M:Slim.ServiceManager.RegisterResolver(Slim.Resolvers.IDependencyResolver)">
            <summary>
            Register a <see cref="T:Slim.Resolvers.IDependencyResolver"/> that manually resolves dependencies.
            </summary>
            <remarks>
            This resolver will be called before auto-resolving a dependency. If resolver can handle the dependency, <see cref="T:Slim.IServiceManager"/> will return the resolved value.
            </remarks>
            <param name="dependencyResolver"><see cref="T:Slim.Resolvers.IDependencyResolver"/> that manually creates a dependency.</param>
        </member>
        <member name="M:Slim.ServiceManager.Dispose">
            <summary>
            Cleans up resources and disposes of all disposable singletons.
            </summary>
        </member>
    </members>
</doc>
